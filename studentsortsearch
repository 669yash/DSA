#include<iostream>
#include<cstring>
using namespace std;

class student{
	public:
		int roll_no;
		char name[50];
		float SGPA;
		char dept[50];
		
		void getinfo();
		void print();
};

void student::getinfo(){
	cout<<"Enter the roll no:"<<endl;
    cin>>roll_no;
    cout<<"Enter the name of student:"<<endl;
    cin>>name;
    cout<<"Enter SGPA scored:"<<endl;
    cin>>SGPA;
    cout<<"Enter the department of student:"<<endl;
    cin>>dept;
}

void student::print(){
	cout<<roll_no<<"\t"<<name<<"\t"<<SGPA<<"\t"<<dept<<endl;
}

void bubble_sort(student arr[], int n){
    student tmp;
    
    for(int i = 0; i < n; i++){
        for(int j = 0; j < (n-i-1); j++){
            if(arr[j].roll_no > arr[j+1].roll_no){
                tmp = arr[j+1];
                arr[j+1] = arr[j];
                arr[j] = tmp;
            }
        }
    }
}

void insertion_sort(student arr[], int n){
	student key;
	for(int i = 1; i<n; i++){
		key=arr[i];
		int j=i-1;
		while(key.name<arr[j].name && j>=0){
			arr[j+1]=arr[j];
			--j;
		}
		arr[j+1]=key;
	}
}

int partition(student arr[], int low, int high){
	float pivot=arr[low].SGPA;
	int k=high;
	student tmp;
	for(int i=high; i>=low; i--){
		if(arr[i].SGPA>pivot){
			tmp=arr[i];
			arr[i]=arr[k];
			arr[k]=tmp;
			k--;
		}
	}
	tmp=arr[low];
	arr[low]=arr[k];
	arr[k]=tmp;
	return k;
}

void quick_sort(student arr[], int low, int high){
	if(low<high){
		int pi = partition(arr,low,high);
		
		quick_sort(arr, low, pi-1);
		quick_sort(arr, pi+1, high);
	}
}

void linear_search(student arr[], int n, float key){
	bool flag=false;
	for(int i=0; i<n; i++){
		if(key==arr[i].SGPA){
			cout<<"Roll no. of searched SGPA: "<<arr[i].roll_no<<endl;
			flag=true;
		}	
	}
	if(flag==false){
			cout<<"Element not found"<<endl;
		}
}

int binary_search(student s[], int n, char key[50]){
   
    int mid, low, high;
    low = 0;
    high = n - 1;
    mid = (low + high) / 2;
   
    while(low <= high){
        if(key == s[mid].name){
            return mid;
        }
        else if(key < s[mid].name){
            high = mid - 1;
            mid = (low + high) / 2;
        }
        else{
            low = mid + 1;
            mid = (low + high) / 2;
        }
    }
   
    return false;
}



int main(){
	int n, ch;
	char cho;
	student s[20];
	cout<<"Enter no. of entries:"<<endl;
	cin>>n;

	for(int i=0; i<n; i++){
		s[i].getinfo();
	}

	cout<<"Unsorted list"<<endl;
	cout<<"Rollno\t Name\t SGPA\t Department"<<endl;
	for(int i=0; i<n; i++){
		s[i].print();
	}
	do{
	cout<<"Enter your choice:\n1.Sort\n2.Search"<<endl;
	cin>>ch;
	
	switch(ch){
		case 1:
			int choice;
			cout<<"Enter your choice:\n1.Bubble sort\n2.insertion sort\n3.Quick sort"<<endl;
			cin>>choice;
			
			switch(choice){
				case 1:
				    bubble_sort(s,n);
	
	                cout<<"Sorted list"<<endl;
	                cout<<"Rollno\t Name\t SGPA\t Department"<<endl;
	                for(int i=0; i<n; i++){
		                s[i].print();
	                }
	                break;
	            
	            case 2:
	            	insertion_sort(s,n);
	            	
	            	cout<<"Sorted list"<<endl;
	            	cout<<"Rollno\t Name\t SGPA\t Department"<<endl;
	            	for(int i=0; i<n; i++){
	            		s[i].print();
	            	}	            	
	            	break;
	            
	            case 3:
	            	quick_sort(s,0,n-1);
	            	
	            	cout<<"Sorted list"<<endl;
	            	cout<<"Rollno\t Name\t SGPA\t Department"<<endl;
	            	for(int i=0; i<n; i++){
	            		s[i].print();
					}
					
					break;	            	
	        }
	        break;
	    case 2:
	    	int c;
	    	cout<<"Enter your choice:\n1.Linear search\n2.Binary search\n3.Fibonacci search"<<endl;
	    	cin>>c;
	    	
	    	switch(c){
	    		case 1:
	    			float x;
	    			cout<<"Enter SGPA to be searched: "<<endl;
	    			cin>>x;
	    			linear_search(s,n,x);
	    			break;
	    		
	    		case 2:
	    			int result;
	    			char sname[50];
	    			cout<<"Enter roll no you want to search: "<<endl;
	    			cin>>sname;
	    			insertion_sort(s,n);
	    			result=binary_search(s, n, sname);
	    			if(result){
	    				cout<<"Name "<<sname<<" has roll no "<<s[result].roll_no<<endl;
					}
	    			break;
	    			
	    		case 3:
	    			
	    			break;
			}		
	}
	cout<<"Do you want to perform any other operation: (Y/N)"<<endl;
	cin>>cho;
	}while(cho=='Y');	
}
