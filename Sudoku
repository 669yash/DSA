//Sudoku
#include<iostream>
using namespace std;

#define N 4

void getarr(int arr[N][N]){
	for(int i=0; i<N; i++ ){
		for(int j=0; j<N; j++){
			cout<<"Enter ["<<i<<"] and["<<j<<"]:"<<endl;
			cin>>arr[i][j];	
		}
	}
}

void print(int arr[N][N]){
	for(int i=0; i<N; i++ ){
		for(int j=0; j<N; j++){
			cout<<arr[i][j];
		}
		cout<<endl;
}
}

bool issafe(int grid[N][N], int row, int col, int num){
	for(int x=0; x<N; x++){
		if(grid[row][x]==num){
			return false;
		}
	}
	for(int x=0; x<N; x++){
		if(grid[x][col]==num){
			return false;
		}
	}
	int startrow=row-row%2;
	int startcol=col-col%2;
	for(int i=0;i<2;i++){
		for(int j=0; j<2; j++){
			if(grid[i+startrow][j+startcol]==num)
			return false;
		}
	}
return true;
}
bool solveSudoku(int grid[N][N], int row, int col){
	if((row==N-1) && (col==1)){
		return true;
	}
	if(col==N){
		row++;
		col=0;
	}
	if(grid[row][col] != 0){
		return solveSudoku(grid, row, col+1);	
	}
	for(int num=1; num<=N; num++){
		if(issafe(grid, row ,col, num)){
			grid[row][col]=num;
			if(solveSudoku(grid, row, col+1))
			return true;
		}
		grid[row][col]=0;
	}
	return false;
}

int main(){
	int arr[N][N];
	
	getarr(arr);
	print(arr);
	
	if(solveSudoku(arr,0,0)){
		print(arr);
	}
	else
	cout<<"No solution!"<<endl;
	
	return 0;
}
